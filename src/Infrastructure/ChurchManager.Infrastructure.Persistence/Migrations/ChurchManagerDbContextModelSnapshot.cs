// <auto-generated />
using System;
using System.Collections.Generic;
using ChurchManager.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChurchManager.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ChurchManagerDbContext))]
    partial class ChurchManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChurchManager.Domain.Common.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Password")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp without time zone");

                    b.PrimitiveCollection<List<string>>("Roles")
                        .HasColumnType("text[]");

                    b.Property<string>("Tenant")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Churches.Church", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ChurchGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("LeaderPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.Property<string>("ShortCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ChurchGroupId");

                    b.HasIndex("LeaderPersonId")
                        .IsUnique();

                    b.ToTable("Church");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Churches.ChurchAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttendanceCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ChildrenCount")
                        .HasColumnType("integer");

                    b.Property<int>("ChurchAttendanceTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ChurchId")
                        .HasColumnType("integer");

                    b.Property<int?>("FemalesCount")
                        .HasColumnType("integer");

                    b.Property<int?>("FirstTimerCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("MalesCount")
                        .HasColumnType("integer");

                    b.Property<int?>("NewConvertCount")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("ReceivedHolySpiritCount")
                        .HasColumnType("integer");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChurchAttendanceTypeId");

                    b.ToTable("ChurchAttendance");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Churches.ChurchAttendanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("ChurchAttendanceType");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Churches.ChurchGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("LeaderPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LeaderPersonId")
                        .IsUnique();

                    b.ToTable("ChurchGroup");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Communication.PushDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Auth")
                        .HasColumnType("text");

                    b.Property<string>("Endpoint")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("P256DH")
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueIdentification")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PushDevice");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Discipleship.DiscipleshipProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DiscipleshipProgram");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Discipleship.DiscipleshipStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DiscipleshipStepDefinitionId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DiscipleshipStepDefinitionId");

                    b.HasIndex("PersonId");

                    b.ToTable("DiscipleshipStep");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Discipleship.DiscipleshipStepDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowMultiple")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("DiscipleshipProgramId")
                        .HasColumnType("integer");

                    b.Property<string>("IconCssClass")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiscipleshipProgramId");

                    b.ToTable("DiscipleshipStepDefinition");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Groups.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int?>("ChurchId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("GroupCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("GroupTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ParentGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChurchId");

                    b.HasIndex("GroupTypeId");

                    b.HasIndex("Name");

                    b.HasIndex("ParentGroupId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Groups.GroupAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttendanceCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("DidNotOccur")
                        .HasColumnType("boolean");

                    b.Property<int?>("FirstTimerCount")
                        .HasColumnType("integer");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("NewConvertCount")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("PhotoUrls")
                        .HasColumnType("text[]");

                    b.Property<int?>("ReceivedHolySpiritCount")
                        .HasColumnType("integer");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupAttendance");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Groups.GroupFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GroupFeature");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Groups.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CommunicationPreference")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("FirstVisitDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupRoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupRoleId");

                    b.HasIndex("PersonId");

                    b.ToTable("GroupMember");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Groups.GroupMemberAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("DidAttend")
                        .HasColumnType("boolean");

                    b.Property<int?>("GroupAttendanceId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupMemberId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsFirstTime")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNewConvert")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool?>("ReceivedHolySpirit")
                        .HasColumnType("boolean");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupAttendanceId");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupMemberId");

                    b.ToTable("GroupMemberAttendance");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Groups.GroupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GroupMemberTerm")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GroupTerm")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IconCssClass")
                        .HasColumnType("text");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("TakesAttendance")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("GroupType");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Groups.GroupTypeRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanEdit")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanManageMembers")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanView")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("GroupTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsLeader")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupTypeId");

                    b.ToTable("GroupRole");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Groups.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("Date");

                    b.Property<string>("Frequency")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("Date");

                    b.Property<int?>("WeeklyDayOfWeek")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("WeeklyTimeOfDay")
                        .HasColumnType("interval");

                    b.Property<string>("iCalendarContent")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.History.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Category")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ChangeType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsSensitive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NewRawValue")
                        .HasColumnType("text");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldRawValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.Property<string>("RelatedData")
                        .HasColumnType("text");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ValueName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Verb")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("EntityType");

                    b.HasIndex("RelatedEntityId");

                    b.HasIndex("RelatedEntityType");

                    b.ToTable("History");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("IconCssClass")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("LastError")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Link")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<bool>("SendWebPush")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SentDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("UseRouter")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Missions.Mission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ChurchId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("IconCssClass")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<List<string>>("PhotoUrls")
                        .HasColumnType("text[]");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Stream")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ChurchId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PersonId");

                    b.ToTable("Mission");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.People.Family", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Family");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.People.FollowUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("AssignedPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.Property<bool?>("RequiresAdditionalFollowUp")
                        .HasColumnType("boolean");

                    b.Property<string>("Severity")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignedPersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("FollowUp");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.People.Notes.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NoteTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NoteTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.People.Notes.NoteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CssClass")
                        .HasColumnType("text");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NoteType");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.People.OnlineUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTimeOffset>("LastOnlineDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("OnlineUser");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.People.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeClassification")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AnniversaryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ChurchId")
                        .HasColumnType("integer");

                    b.Property<string>("CommunicationPreference")
                        .HasColumnType("text");

                    b.Property<string>("ConnectionStatus")
                        .HasColumnType("text");

                    b.Property<int>("FamilyId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FirstVisitDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<Guid?>("GivingGroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("InactiveDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("Occupation")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<bool?>("ReceivedHolySpirit")
                        .HasColumnType("boolean");

                    b.Property<string>("RecordStatus")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<string>("UserLoginId")
                        .HasColumnType("text");

                    b.Property<int?>("ViewedCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChurchId");

                    b.HasIndex("ConnectionStatus");

                    b.HasIndex("FamilyId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.People.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Extension")
                        .HasColumnType("text");

                    b.Property<bool>("IsMessagingEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUnlisted")
                        .HasColumnType("boolean");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PhoneNumber");
                });

            modelBuilder.Entity("CodeBoss.Jobs.Model.ServiceJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Assembly")
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("EnableHistory")
                        .HasColumnType("boolean");

                    b.Property<int>("HistoryCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("JobKey")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, string>>("JobParameters")
                        .HasColumnType("hstore");

                    b.Property<DateTime?>("LastRunDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("LastRunDurationSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("LastStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastStatusMessage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastSuccessfulRunDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NotificationEmails")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("NotificationStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ServiceJobs");
                });

            modelBuilder.Entity("CodeBoss.Jobs.Model.ServiceJobHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ServiceJobId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StopDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ServiceJobId");

                    b.ToTable("ServiceJobHistory");
                });

            modelBuilder.Entity("GroupGroupFeature", b =>
                {
                    b.Property<int>("FeaturesId")
                        .HasColumnType("integer");

                    b.Property<int>("GroupsId")
                        .HasColumnType("integer");

                    b.HasKey("FeaturesId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("GroupsFeatures", (string)null);
                });

            modelBuilder.Entity("ChurchManager.Domain.Common.UserLogin", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.People.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Churches.Church", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.Churches.ChurchGroup", "ChurchGroup")
                        .WithMany("Churches")
                        .HasForeignKey("ChurchGroupId");

                    b.HasOne("ChurchManager.Domain.Features.People.Person", "LeaderPerson")
                        .WithOne()
                        .HasForeignKey("ChurchManager.Domain.Features.Churches.Church", "LeaderPersonId");

                    b.Navigation("ChurchGroup");

                    b.Navigation("LeaderPerson");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Churches.ChurchAttendance", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.Churches.ChurchAttendanceType", "ChurchAttendanceType")
                        .WithMany()
                        .HasForeignKey("ChurchAttendanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChurchAttendanceType");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Churches.ChurchGroup", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.People.Person", "LeaderPerson")
                        .WithOne()
                        .HasForeignKey("ChurchManager.Domain.Features.Churches.ChurchGroup", "LeaderPersonId");

                    b.Navigation("LeaderPerson");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Communication.PushDevice", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.People.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Discipleship.DiscipleshipStep", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.Discipleship.DiscipleshipStepDefinition", "Definition")
                        .WithMany("Steps")
                        .HasForeignKey("DiscipleshipStepDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChurchManager.Domain.Features.People.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Definition");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Discipleship.DiscipleshipStepDefinition", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.Discipleship.DiscipleshipProgram", "DiscipleshipProgram")
                        .WithMany("StepDefinitions")
                        .HasForeignKey("DiscipleshipProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscipleshipProgram");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Groups.Group", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.Churches.Church", "Church")
                        .WithMany()
                        .HasForeignKey("ChurchId");

                    b.HasOne("ChurchManager.Domain.Features.Groups.GroupType", "GroupType")
                        .WithMany()
                        .HasForeignKey("GroupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChurchManager.Domain.Features.Groups.Group", "ParentGroup")
                        .WithMany("Groups")
                        .HasForeignKey("ParentGroupId");

                    b.HasOne("ChurchManager.Domain.Features.Groups.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId");

                    b.Navigation("Church");

                    b.Navigation("GroupType");

                    b.Navigation("ParentGroup");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Groups.GroupAttendance", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.Groups.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ChurchManager.Domain.Features.Groups.AttendanceReview", "AttendanceReview", b1 =>
                        {
                            b1.Property<int>("GroupAttendanceId")
                                .HasColumnType("integer");

                            b1.Property<string>("Feedback")
                                .HasColumnType("text");

                            b1.Property<bool?>("IsReviewed")
                                .HasColumnType("boolean");

                            b1.Property<string>("ReviewedBy")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("GroupAttendanceId");

                            b1.ToTable("GroupAttendance");

                            b1.WithOwner()
                                .HasForeignKey("GroupAttendanceId");
                        });

                    b.OwnsOne("ChurchManager.Domain.Common.Money", "Offering", b1 =>
                        {
                            b1.Property<int>("GroupAttendanceId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .HasMaxLength(5)
                                .HasColumnType("character varying(5)");

                            b1.HasKey("GroupAttendanceId");

                            b1.ToTable("GroupAttendance");

                            b1.WithOwner()
                                .HasForeignKey("GroupAttendanceId");
                        });

                    b.Navigation("AttendanceReview")
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Offering");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Groups.GroupMember", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.Groups.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChurchManager.Domain.Features.Groups.GroupTypeRole", "GroupRole")
                        .WithMany()
                        .HasForeignKey("GroupRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChurchManager.Domain.Features.People.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ChurchManager.Domain.Features.Groups.ArchiveStatus", "ArchiveStatus", b1 =>
                        {
                            b1.Property<int>("GroupMemberId")
                                .HasColumnType("integer");

                            b1.Property<DateTime?>("ArchivedDateTime")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<bool?>("IsArchived")
                                .HasColumnType("boolean");

                            b1.HasKey("GroupMemberId");

                            b1.ToTable("GroupMember");

                            b1.WithOwner()
                                .HasForeignKey("GroupMemberId");
                        });

                    b.Navigation("ArchiveStatus")
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("GroupRole");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Groups.GroupMemberAttendance", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.Groups.GroupAttendance", null)
                        .WithMany("Attendees")
                        .HasForeignKey("GroupAttendanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChurchManager.Domain.Features.Groups.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChurchManager.Domain.Features.Groups.GroupMember", "GroupMember")
                        .WithMany()
                        .HasForeignKey("GroupMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("GroupMember");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Groups.GroupTypeRole", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.Groups.GroupType", "GroupType")
                        .WithMany()
                        .HasForeignKey("GroupTypeId");

                    b.Navigation("GroupType");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Message", b =>
                {
                    b.HasOne("ChurchManager.Domain.Common.UserLogin", "UserLogin")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Missions.Mission", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.Churches.Church", "Church")
                        .WithMany()
                        .HasForeignKey("ChurchId");

                    b.HasOne("ChurchManager.Domain.Features.Groups.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("ChurchManager.Domain.Features.People.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.OwnsOne("ChurchManager.Domain.Features.Missions.Attendance", "Attendance", b1 =>
                        {
                            b1.Property<int>("MissionId")
                                .HasColumnType("integer");

                            b1.Property<int?>("AttendanceCount")
                                .HasColumnType("integer");

                            b1.Property<int?>("FirstTimerCount")
                                .HasColumnType("integer");

                            b1.Property<int?>("NewConvertCount")
                                .HasColumnType("integer");

                            b1.Property<int?>("ReceivedHolySpiritCount")
                                .HasColumnType("integer");

                            b1.HasKey("MissionId");

                            b1.ToTable("Mission");

                            b1.WithOwner()
                                .HasForeignKey("MissionId");
                        });

                    b.OwnsOne("ChurchManager.Domain.Common.Money", "Offering", b1 =>
                        {
                            b1.Property<int>("MissionId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<string>("Currency")
                                .HasMaxLength(5)
                                .HasColumnType("character varying(5)");

                            b1.HasKey("MissionId");

                            b1.ToTable("Mission");

                            b1.WithOwner()
                                .HasForeignKey("MissionId");
                        });

                    b.Navigation("Attendance")
                        .IsRequired();

                    b.Navigation("Church");

                    b.Navigation("Group");

                    b.Navigation("Offering");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.People.Family", b =>
                {
                    b.OwnsOne("ChurchManager.Domain.Features.People.Address", "Address", b1 =>
                        {
                            b1.Property<int>("FamilyId")
                                .HasColumnType("integer");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("text");

                            b1.Property<string>("Province")
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .HasColumnType("text");

                            b1.HasKey("FamilyId");

                            b1.ToTable("Family");

                            b1.WithOwner()
                                .HasForeignKey("FamilyId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.People.FollowUp", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.People.Person", "AssignedPerson")
                        .WithMany()
                        .HasForeignKey("AssignedPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChurchManager.Domain.Features.People.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedPerson");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.People.Notes.Note", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.People.Notes.NoteType", "NoteType")
                        .WithMany()
                        .HasForeignKey("NoteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChurchManager.Domain.Features.People.Person", null)
                        .WithMany("Notes")
                        .HasForeignKey("PersonId");

                    b.Navigation("NoteType");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.People.OnlineUser", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.People.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.People.Person", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.Churches.Church", "Church")
                        .WithMany()
                        .HasForeignKey("ChurchId");

                    b.HasOne("ChurchManager.Domain.Features.People.Family", "Family")
                        .WithMany("FamilyMembers")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ChurchManager.Domain.Features.People.Baptism", "BaptismStatus", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .HasColumnType("integer");

                            b1.Property<DateTime?>("BaptismDate")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<bool?>("IsBaptised")
                                .HasColumnType("boolean");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.OwnsOne("ChurchManager.Domain.Features.People.BirthDate", "BirthDate", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .HasColumnType("integer");

                            b1.Property<int?>("BirthDay")
                                .HasColumnType("integer");

                            b1.Property<int?>("BirthMonth")
                                .HasColumnType("integer");

                            b1.Property<int?>("BirthYear")
                                .HasColumnType("integer");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.OwnsOne("ChurchManager.Domain.Features.People.DeceasedStatus", "DeceasedStatus", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .HasColumnType("integer");

                            b1.Property<DateTime?>("DeceasedDate")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<bool?>("IsDeceased")
                                .HasColumnType("boolean");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.OwnsOne("ChurchManager.Domain.Features.People.Email", "Email", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .HasColumnType("integer");

                            b1.Property<string>("Address")
                                .HasColumnType("text");

                            b1.Property<bool?>("IsActive")
                                .HasColumnType("boolean");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.OwnsOne("ChurchManager.Domain.Features.People.FullName", "FullName", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .HasColumnType("integer");

                            b1.Property<string>("FirstName")
                                .HasColumnType("text");

                            b1.Property<string>("LastName")
                                .HasColumnType("text");

                            b1.Property<string>("MiddleName")
                                .HasColumnType("text");

                            b1.Property<string>("NickName")
                                .HasColumnType("text");

                            b1.Property<string>("Suffix")
                                .HasColumnType("text");

                            b1.Property<string>("Title")
                                .HasColumnType("text");

                            b1.HasKey("PersonId");

                            b1.HasIndex("FirstName");

                            b1.HasIndex("LastName");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("BaptismStatus")
                        .IsRequired();

                    b.Navigation("BirthDate")
                        .IsRequired();

                    b.Navigation("Church");

                    b.Navigation("DeceasedStatus")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.People.PhoneNumber", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.People.Person", null)
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("CodeBoss.Jobs.Model.ServiceJobHistory", b =>
                {
                    b.HasOne("CodeBoss.Jobs.Model.ServiceJob", "ServiceJob")
                        .WithMany("ServiceJobHistory")
                        .HasForeignKey("ServiceJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceJob");
                });

            modelBuilder.Entity("GroupGroupFeature", b =>
                {
                    b.HasOne("ChurchManager.Domain.Features.Groups.GroupFeature", null)
                        .WithMany()
                        .HasForeignKey("FeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChurchManager.Domain.Features.Groups.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Churches.ChurchGroup", b =>
                {
                    b.Navigation("Churches");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Discipleship.DiscipleshipProgram", b =>
                {
                    b.Navigation("StepDefinitions");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Discipleship.DiscipleshipStepDefinition", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Groups.Group", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.Groups.GroupAttendance", b =>
                {
                    b.Navigation("Attendees");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.People.Family", b =>
                {
                    b.Navigation("FamilyMembers");
                });

            modelBuilder.Entity("ChurchManager.Domain.Features.People.Person", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("CodeBoss.Jobs.Model.ServiceJob", b =>
                {
                    b.Navigation("ServiceJobHistory");
                });
#pragma warning restore 612, 618
        }
    }
}

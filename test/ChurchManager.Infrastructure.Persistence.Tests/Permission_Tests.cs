using ChurchManager.Domain.Common;
using ChurchManager.Domain.Features.Churches;
using ChurchManager.Domain.Features.Groups;
using ChurchManager.Domain.Features.People;
using ChurchManager.Domain.Features.Permissions;
using ChurchManager.Domain.Features.Permissions.Repositories;
using ChurchManager.Domain.Features.Permissions.Services;
using ChurchManager.Features.Auth.Services;
using ChurchManager.Infrastructure.Persistence.Contexts;
using ChurchManager.Infrastructure.Persistence.Repositories;
using ChurchManager.Infrastructure.Persistence.Tests.Helpers;
using CodeBoss.AspNetCore.CbDateTime;
using Codeboss.Types;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using Xunit;
using Xunit.Abstractions;

namespace ChurchManager.Infrastructure.Persistence.Tests;

public class Permission_Tests
{
    private readonly DbContextOptions<ChurchManagerDbContext> _options =
        new DbContextOptionsBuilder<ChurchManagerDbContext>()
            .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
            //.UseNpgsql("Server=localhost;Port=5432;Database=churchmanager_db;User Id=admin;password=P455word1;")
            //.UseLoggerFactory(_loggerFactory) //Optional, this logs SQL generated by EF Core to the Console
            .Options;
    
    private readonly ITestOutputHelper _output;
    private readonly IDateTimeProvider _dateTimeProvider;
    
    public Permission_Tests(ITestOutputHelper output)
    {
        _output = output;
        _dateTimeProvider = new CodeBossDateTimeProvider(Options.Create(new DateTimeOptions
        {
            TimeZone = "South Africa Standard Time"
        }), null);
    }

    [Fact]
    public async Task ChurchGroupAdmin_Should_See_All_Churches_In_Group()
    {
        using (var dbContext = new ChurchManagerDbContext(_options, new NoneTenantProvider(), null))
        {
            await dbContext.Database.EnsureCreatedAsync();
            var rolesDb = new UserLoginRoleDbRepository(dbContext, _dateTimeProvider);
            var permissionsDb = new EntityPermissionDbRepository(dbContext, _dateTimeProvider);
            var service = new PermissionService(rolesDb, permissionsDb, dbContext);
            
            // Arrange
            var (churchGroup, churches) = await SetupChurchGroupWithChurches(dbContext);
            var userLoginRole = await SetupUserWithDynamicPermission("ChurchGroup", churchGroup.Id, "Church", dbContext);

            // Act
            var query = dbContext.Church.AsQueryable();
            var filteredChurches = await service.FilterByPermissionAsync(userLoginRole.UserLoginId, query, "View");
            var result = await filteredChurches.ToListAsync();

            // Assert
            Assert.Equal(2, result.Count);
            Assert.All(result, church => 
                Assert.Equal(churchGroup.Id, church.ChurchGroupId));
            
            // Cleanup
            await dbContext.Database.EnsureDeletedAsync();
        }
    }
    
    [Fact]
    public async Task ChurchGroupAdmin_Should_See_New_Church_Added_To_Group()
    {
        using (var dbContext = new ChurchManagerDbContext(_options, new NoneTenantProvider(), null))
        {
            await dbContext.Database.EnsureCreatedAsync();
            var rolesDb = new UserLoginRoleDbRepository(dbContext, _dateTimeProvider);
            var permissionsDb = new EntityPermissionDbRepository(dbContext, _dateTimeProvider);
            var service = new PermissionService(rolesDb, permissionsDb, dbContext);
            
            // Arrange
            var (churchGroup, churches) = await SetupChurchGroupWithChurches(dbContext);
            var userLoginRole = await SetupUserWithDynamicPermission(scopeType:"ChurchGroup", churchGroup.Id, entityType:"Church", dbContext);

            // Add new church to group
            var newChurch = new Church 
            { 
                Name = "New Church", 
                ChurchGroupId = churchGroup.Id 
            };
            dbContext.Church.Add(newChurch);
            await dbContext.SaveChangesAsync();

            // Act
            var query = dbContext.Church.AsQueryable();
            var filteredChurches = await service.FilterByPermissionAsync(userLoginRole.UserLoginId, query, "View");
            var result = await filteredChurches.ToListAsync();

            // Assert
            Assert.Equal(3, result.Count); // Now includes the new church
            Assert.Contains(result, c => c.Id == newChurch.Id);
            
            // Cleanup
            await dbContext.Database.EnsureDeletedAsync();
        }
    }

    [Fact]
    public async Task ChurchAdmin_Should_See_All_Groups_In_Church()
    {
        using (var dbContext = new ChurchManagerDbContext(_options, new NoneTenantProvider(), null))
        {
            await dbContext.Database.EnsureCreatedAsync();
            var rolesDb = new UserLoginRoleDbRepository(dbContext, _dateTimeProvider);
            var permissionsDb = new EntityPermissionDbRepository(dbContext, _dateTimeProvider);
            var service = new PermissionService(rolesDb, permissionsDb, dbContext);
            
            // Arrange
            var church = await SetupChurchWithGroups(dbContext);
            var userLoginRole = await SetupUserWithDynamicPermission(scopeType: "Church", church.Id, entityType: "Group", dbContext);

            // Act
            var query = dbContext.Group.AsQueryable();
            var filteredGroups = await service.FilterByPermissionAsync(userLoginRole.UserLoginId, query, "View");
            var result = await filteredGroups.ToListAsync();

            // Assert
            Assert.Equal(2, result.Count);
            Assert.All(result, group => 
                Assert.Equal(church.Id, group.ChurchId));
            
            // Cleanup
            await dbContext.Database.EnsureDeletedAsync();
        }
    }

    [Fact]
    public async Task ExplicitPermission_Should_Only_See_Specified_Entities()
    {
        using (var dbContext = new ChurchManagerDbContext(_options, new NoneTenantProvider(), null))
        {
            await dbContext.Database.EnsureCreatedAsync();
            var rolesDb = new UserLoginRoleDbRepository(dbContext, _dateTimeProvider);
            var permissionsDb = new EntityPermissionDbRepository(dbContext, _dateTimeProvider);
            var service = new PermissionService(rolesDb, permissionsDb, dbContext);
            
            // Arrange
            var (churchGroup, churches) = await SetupChurchGroupWithChurches(dbContext);
            var userLoginRole = await SetupUserWithExplicitPermission(
                entityType: "Church",
                entityIds: new[] { churches[0].Id },
                dbContext);

            // Act
            var query = dbContext.Church.AsQueryable();
            var filteredChurches = await service.FilterByPermissionAsync(userLoginRole.UserLoginId, query, "View");
            var result = await filteredChurches.ToListAsync();

            // Assert
            Assert.Single(result);
            Assert.Equal(churches[0].Id, result.First().Id);
            
            // Cleanup
            await dbContext.Database.EnsureDeletedAsync();
        }
    }

    [Fact]
    public async Task HasPermission_Should_ReturnTrue_ForDynamicScope()
    {
        using (var dbContext = new ChurchManagerDbContext(_options, new NoneTenantProvider(), null))
        {
            await dbContext.Database.EnsureCreatedAsync();
            var rolesDb = new UserLoginRoleDbRepository(dbContext, _dateTimeProvider);
            var permissionsDb = new EntityPermissionDbRepository(dbContext, _dateTimeProvider);
            var service = new PermissionService(rolesDb, permissionsDb, dbContext);
            
            // Arrange
            var (churchGroup, churches) = await SetupChurchGroupWithChurches(dbContext);
            var userLoginRole = await SetupUserWithDynamicPermission(
                scopeType:"ChurchGroup", 
                churchGroup.Id, 
                entityType:"Church", dbContext);

            // Act
            var hasPermission = await service.HasPermissionAsync<Church>(
                userLoginRole.UserLoginId,
                entityId:churches[0].Id,
                permission:"View");

            // Assert
            Assert.True(hasPermission);
            
            // Cleanup
            await dbContext.Database.EnsureDeletedAsync();
        }
    }

    [Fact]
    public async Task HasPermission_Should_ReturnFalse_ForOutOfScopeEntity()
    {
        using (var dbContext = new ChurchManagerDbContext(_options, new NoneTenantProvider(), null))
        {
            await dbContext.Database.EnsureCreatedAsync();
            var rolesDb = new UserLoginRoleDbRepository(dbContext, _dateTimeProvider);
            var permissionsDb = new EntityPermissionDbRepository(dbContext, _dateTimeProvider);
            var service = new PermissionService(rolesDb, permissionsDb, dbContext);
            
            // Arrange
            var (churchGroup, churches) = await SetupChurchGroupWithChurches(dbContext);
            var otherChurch = new Church { Name = "Other Church", ChurchGroupId = churchGroup.Id + 1 };
            dbContext.Church.Add(otherChurch);
            await dbContext.SaveChangesAsync();

            var userLoginRole = await SetupUserWithDynamicPermission(
                scopeType:"ChurchGroup", 
                churchGroup.Id, 
                entityType:"Church", dbContext);

            // Act
            var hasPermission = await service.HasPermissionAsync<Church>(
                userLoginRole.UserLoginId,
                entityId:otherChurch.Id,
                permission:"View");

            // Assert
            Assert.False(hasPermission);
            
            // Cleanup
            await dbContext.Database.EnsureDeletedAsync();
        }
    }

    private async Task<(ChurchGroup, List<Church>)> SetupChurchGroupWithChurches(ChurchManagerDbContext _context)
    {
        var churchGroup = new ChurchGroup { Name = "Test Church Group" };
        var churches = new List<Church>
        {
            new() { Name = "Church 1", ChurchGroup = churchGroup },
            new() { Name = "Church 2", ChurchGroup = churchGroup }
        };
        _context.Church.AddRange(churches);
        await _context.SaveChangesAsync();

        return (churchGroup, churches);
    }
    
    private async Task<Church> SetupChurchWithGroups(ChurchManagerDbContext _context)
    {
        var church = new Church { Name = "Test Church" };
        var groupType = new GroupType { Name = "Test Group Type" };
        var groups = new[]
        {
            new Group { Name = "Group 1", Church = church, GroupType =  groupType},
            new Group { Name = "Group 2", Church = church, GroupType =  groupType}
        };
        _context.Group.AddRange(groups);
        await _context.SaveChangesAsync();

        return church;
    }
    
    private async Task<UserLoginRole> SetupUserWithDynamicPermission(string scopeType, int scopeId, string entityType, ChurchManagerDbContext _context)
    {
        var family = new Family() { Address = new Address() };
        var person = new Person { Family = family};
        var permission = new EntityPermission
        {
            EntityType = entityType,
            IsDynamicScope = true,
            ScopeType = scopeType,
            ScopeId = scopeId,
            CanView = true,
            CanEdit = true
        };
        var role = new UserLoginRole("TestRole")
        {
            Permissions = [permission]
        };
        var userLogin = new UserLogin 
        { 
            Username = "test@test.com",
            Password = "hash",
            Roles = [role],
            Tenant = "Tenant1",
            Person = person
        };
        _context.UserLogin.Add(userLogin);
        await _context.SaveChangesAsync();
        
        return role;
    }
    
    private async Task<UserLoginRole> SetupUserWithExplicitPermission(string entityType, int[] entityIds, ChurchManagerDbContext _context)
    {
        var family = new Family() { Address = new Address() };
        var person = new Person { Family = family};
        var permission = new EntityPermission
        {
            EntityType = entityType,
            EntityIds = entityIds,
            IsDynamicScope = false,
            CanView = true,
            CanEdit = true
        };
        var role = new UserLoginRole("TestRole")
        {
            Permissions = [permission]
        };
        var userLogin = new UserLogin 
        { 
            Username = "test@test.com",
            Password = "hash",
            Roles = [role],
            Tenant = "Tenant1",
            Person = person
        };
        _context.UserLogin.Add(userLogin);
        await _context.SaveChangesAsync();

        return role;
    }
}

// Helper extensions for testing
public static class TestExtensions
{
    public static async Task<T> FirstOrThrowAsync<T>(this IQueryable<T> query)
    {
        var result = await query.FirstOrDefaultAsync();
        if (result == null) throw new InvalidOperationException("No entity found");
        
        return result;
    }
}